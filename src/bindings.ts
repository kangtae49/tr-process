
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getResourcePath() : Promise<Result<string, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_resource_path") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getProcess() : Promise<Result<ProcessInfo[], ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_process") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async runHttpServer(servInfo: ServInfo) : Promise<Result<ServInfo, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("run_http_server", { servInfo }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type ApiError = { Error: string } | { JsonError: string } | { TokioError: string } | { IoError: string } | { NetstatError: string } | { WindowsError: string }
export type DiskInfo = { read_bytes: number; write_bytes: number; total_read_bytes: number; total_write_bytes: number }
export type ProcessInfo = { pid: number; ppid?: number | null; name?: string | null; exe?: string | null; cpu_usage?: number | null; memory?: number | null; disk_usage?: DiskInfo | null; accumulated_cpu_time?: number | null; local_addr?: string | null; local_port?: number | null; protocol?: SockProtocol | null; remote_addr?: string | null; remote_port?: number | null; state?: SockState | null; uptime?: number | null }
export type ServInfo = { name: string; ip: string; port: number; path: string }
export type SockProtocol = "Tcp" | "Udp"
export type SockState = "Closed" | "Listen" | "SynSent" | "SynReceived" | "Established" | "FinWait1" | "FinWait2" | "CloseWait" | "Closing" | "LastAck" | "TimeWait" | "DeleteTcb" | "Unknown"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
// This file has been generated by Specta. DO NOT EDIT.

export type HttpCmd = "Refresh"

export type HttpNotify = { cmd: HttpCmd; param?: string | null }

